    OP_EXIT,			// Function return
    OP_MINUS_EXIT,		// Function return if zero/false
    OP_LIT,			// Inline literal constant
    OP_CLIT,		 	// Inline literal signed character constant
    OP_SLIT,		 	// Push instruction pointer and branch always
    OP_VAR,			// Handle variable reference
    OP_CONST,			// Handle constant
    OP_FUNC,			// Handle function call
    OP_DOES,			// Handle object pointer
    OP_PARAM,			// Duplicate inline index stack element
    OP_BRANCH,			// Branch always
    OP_ZERO_BRANCH,		// Branch if zero/false
    OP_DO,			// Start loop block
    OP_I,			// Current loop index
    OP_J,			// Outer loop index
    OP_LEAVE,			// Mark loop block as completed
    OP_LOOP,			// End loop block (one increment)
    OP_PLUS_LOOP,		// End loop block (n increment)
    OP_COMPILE,			// Add inline operation/function code
    OP_EXECUTE,			// Execute operation or function
    OP_TRACE,			// Set trace mode
    OP_C_FETCH,			// Load character (signed byte)
    OP_C_STORE,			// Store character
    OP_FETCH,			// Load data
    OP_STORE,			// Store data
    OP_PLUS_STORE,		// Update data
    OP_DP,			// Data pointer variable
    OP_HERE,			// Data pointer
    OP_ALLOT,			// Allocate number of bytes
    OP_COMMA,			// Allocate and assign from top of stack
    OP_C_COMMA,			// Allocate and assign character
    OP_CELLS,			// Convert cells to bytes for allot
    OP_TO_R,			// Push data on return stack
    OP_R_FROM,			// Pop data from return stack
    OP_R_FETCH,			// Copy from return stack
    OP_SP,			// Stack pointer
    OP_DEPTH,			// Number of elements
    OP_DROP,			// Drop top of stack
    OP_NIP,			// Drop next top of stack
    OP_EMPTY,			// Empty stack
    OP_DUP,			// Duplicate top of stack
    OP_QUESTION_DUP,		// Duplicate top of stack if not zero
    OP_OVER,			// Duplicate next top of stack
    OP_TUCK,			// Duplicate top of stack and rotate
    OP_PICK,			// Duplicate index stack element
    OP_SWAP,			// Swap two top stack elements
    OP_ROT,			// Rotate three top stack elements
    OP_MINUS_ROT,		// Inverse rotate three top stack elements
    OP_ROLL,			// Rotate given number of stack elements
    OP_TWO_SWAP,		// Swap two double stack elements
    OP_TWO_DUP,			// Duplicate double stack elements
    OP_TWO_OVER,		// Duplicate double next top of stack
    OP_TWO_DROP,		// Drop double top of stack
    OP_CELL,			// Stack width in bytes
    OP_MINUS_TWO,		// Push constant(-2)
    OP_MINUS_ONE,		// Push constant(-1)
    OP_ZERO,			// Push constant(0)
    OP_ONE,			// Push constant(1)
    OP_TWO,			// Push constant(2)
    OP_BOOL,			// Convert top of stack to boolean
    OP_NOT,			// Convert top of stack to invert boolean
    OP_TRUE,			// Push true(-1)
    OP_FALSE,			// Push false(0)
    OP_INVERT,			// Bitwise inverse top element
    OP_AND,			// Bitwise AND top two elements
    OP_OR,			// Bitwise OR top two elements
    OP_XOR,			// Bitwise XOR top two elements
    OP_NEGATE,			// Negate top of stack
    OP_ONE_PLUS,		// Increment top of stack
    OP_ONE_MINUS,		// Decrement top of stack
    OP_TWO_PLUS,		// Increment by two
    OP_TWO_MINUS,		// Decrement by two
    OP_TWO_STAR,		// Multiply by two
    OP_TWO_SLASH,		// Divide by two
    OP_PLUS,			// Add top two elements
    OP_MINUS,			// Substract top two elements
    OP_STAR,			// Multiply top two elements
    OP_STAR_SLASH,		// Multiply/Divide top three elements
    OP_SLASH,			// Quotient for division of top two elements
    OP_MOD,			// Remainder for division of top two elements
    OP_SLASH_MOD,		// Quotient and remainder
    OP_LSHIFT,			// Left shift
    OP_RSHIFT,			// Right shift
    OP_WITHIN,			// Within boundard
    OP_ABS,			// Absolute value
    OP_MIN,			// Minimum value
    OP_MAX,			// Maximum value
    OP_ZERO_NOT_EQUALS,		// Not equal zero
    OP_ZERO_LESS,		// Less than zero
    OP_ZERO_EQUALS,		// Equal to zero
    OP_ZERO_GREATER,		// Greater than zero
    OP_NOT_EQUALS,		// Not equal
    OP_LESS,			// Less than
    OP_EQUALS,			// Equal
    OP_GREATER,			// Greater than
    OP_U_LESS,			// Unsigned less than
    OP_LOOKUP,			// Lookup word in dictionary
    OP_TO_BODY,			// Access data area application variable
    OP_WORDS,			// Print list of operations/functions
    OP_BASE,			// Base for number conversion
    OP_HEX,			// Set hexa-decimal number conversion base
    OP_DECIMAL,			// Set decimal number conversion base
    OP_QUESTION_KEY,		// Read character if available
    OP_KEY,			// Wait for character and read
    OP_EMIT,			// Print character
    OP_CR,			// Print new-line
    OP_SPACE,			// Print space
    OP_SPACES,			// Print spaces
    OP_U_DOT,			// Print top of stack as unsigned
    OP_DOT,			// Print top of stack
    OP_DOT_S,			// Print contents of parameter stack
    OP_DOT_QUOTE,		// Print program memory string
    OP_TYPE,			// Print string
    OP_DOT_NAME,		// Print operation/function name
    OP_QUESTION,		// Print value of variable
    OP_MICROS,			// Micro-seconds
    OP_MILLIS,			// Milli-seconds
    OP_DELAY,			// Delay milli-seconds (yield)
    OP_PINMODE,			// Digital pin mode
    OP_DIGITALREAD,		// Read digital pin
    OP_DIGITALWRITE,		// Write digital pin
    OP_DIGITALTOGGLE,		// Toggle digital pin
    OP_ANALOGREAD,		// Read analog pin
    OP_ANALOGWRITE,		// Write pwm pin
    OP_HALT,			// Halt virtual machine
    OP_YIELD,			// Yield virtual machine
    OP_TRAP,			// Extended instruction
    OP_NOP			// No-operation
